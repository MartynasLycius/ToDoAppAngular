{"ast":null,"code":"import { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nexport class ErrorInterceptorService {\n  constructor(toast) {\n    this.toast = toast;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      if (error.error instanceof SyntaxError && error.status === 200) {\n        // Handle the specific error case where the response body cannot be parsed as JSON\n        console.error('Error: Item is Deleted');\n      } else {\n        // Handle other errors\n        this.handleError(error);\n      }\n      // Rethrow the error to propagate it further\n      return throwError(error);\n    }));\n  }\n  handleError(error) {\n    if (error.status === 400) {\n      this.toast.error(error.message, 'Bad Request');\n    } else if (error.status === 401) {\n      this.toast.error('', 'Token Expired');\n    } else if (error.status === 417) {\n      this.toast.error(error.message, 'Request error');\n    } else if (error.status >= 500) {\n      this.toast.error('Please contact with support team', 'Data fetching error');\n    } else if (error.status >= 412) {\n      this.toast.error(error?.message);\n    }\n  }\n}\nErrorInterceptorService.ɵfac = function ErrorInterceptorService_Factory(t) {\n  return new (t || ErrorInterceptorService)(i0.ɵɵinject(i1.ToastrService));\n};\nErrorInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorInterceptorService,\n  factory: ErrorInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAQA,UAAU,EAAcC,UAAU,QAAO,MAAM;;;AAMvD,OAAM,MAAOC,uBAAuB;EAElCC,YAAoBC,KAAoB;IAApB,UAAK,GAALA,KAAK;EACzB;EAEAC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CACxBG,IAAI,CACHT,UAAU,CAAEU,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACA,KAAK,YAAYC,WAAW,IAAID,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;QAC9D;QACAC,OAAO,CAACH,KAAK,CAAC,wBAAwB,CAAC;OACxC,MAAM;QACL;QACA,IAAI,CAACI,WAAW,CAACJ,KAAK,CAAC;;MAGzB;MACA,OAAOT,UAAU,CAACS,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACL;EAEQI,WAAW,CAACJ,KAAwB;IAC1C,IAAIA,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;MAExB,IAAI,CAACR,KAAK,CAACM,KAAK,CAACA,KAAK,CAACK,OAAO,EAAE,aAAa,CAAC;KAC/C,MAAM,IAAIL,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;MAC/B,IAAI,CAACR,KAAK,CAACM,KAAK,CAAC,EAAE,EAAE,eAAe,CAAC;KACtC,MAAM,IAAIA,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;MAC/B,IAAI,CAACR,KAAK,CAACM,KAAK,CAACA,KAAK,CAACK,OAAO,EAAE,eAAe,CAAC;KACjD,MAAM,IAAIL,KAAK,CAACE,MAAM,IAAI,GAAG,EAAE;MAC9B,IAAI,CAACR,KAAK,CAACM,KAAK,CAAC,kCAAkC,EAAE,qBAAqB,CAAC;KAC5E,MAAM,IAAIA,KAAK,CAACE,MAAM,IAAI,GAAG,EAAE;MAC9B,IAAI,CAACR,KAAK,CAACM,KAAK,CAACA,KAAK,EAAEK,OAAO,CAAC;;EAEpC;;AApCWb,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;SAAvBA,uBAAuB;EAAAc,SAAvBd,uBAAuB;EAAAe,YAFtB;AAAM","names":["catchError","throwError","ErrorInterceptorService","constructor","toast","intercept","request","next","handle","pipe","error","SyntaxError","status","console","handleError","message","factory","providedIn"],"sourceRoot":"","sources":["/Users/anjarul/Desktop/anjarul/proIT/todoAngular/src/app/shared/services/error-interceptor.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from \"@angular/common/http\";\nimport {catchError, Observable, throwError} from \"rxjs\";\nimport {ToastrService} from \"ngx-toastr\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorInterceptorService implements HttpInterceptor {\n\n  constructor(private toast: ToastrService) {\n  }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request)\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          if (error.error instanceof SyntaxError && error.status === 200) {\n            // Handle the specific error case where the response body cannot be parsed as JSON\n            console.error('Error: Item is Deleted');\n          } else {\n            // Handle other errors\n            this.handleError(error);\n          }\n\n          // Rethrow the error to propagate it further\n          return throwError(error);\n        })\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 400) {\n\n      this.toast.error(error.message, 'Bad Request');\n    } else if (error.status === 401) {\n      this.toast.error('', 'Token Expired');\n    } else if (error.status === 417) {\n      this.toast.error(error.message, 'Request error');\n    } else if (error.status >= 500) {\n      this.toast.error('Please contact with support team', 'Data fetching error');\n    } else if (error.status >= 412) {\n      this.toast.error(error?.message);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}