{"ast":null,"code":"import { FormControl, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../shared/commons/ApiEndPoint\";\nimport * as i3 from \"@angular/forms\";\nexport class TodoServiceService {\n  constructor(httpClient, apiEndPoint, fb) {\n    this.httpClient = httpClient;\n    this.apiEndPoint = apiEndPoint;\n    this.fb = fb;\n  }\n  getToDoList(page, size, query) {\n    return this.httpClient.get(this.apiEndPoint.TODO.FETCH_TODO_LIST + `?page=${page}&size=${size}&query=${query}`);\n  }\n  deleteItem(id) {\n    return this.httpClient.delete(this.apiEndPoint.TODO.DELETE_TODO_ITEM(id));\n  }\n  getDetails(id) {\n    return this.httpClient.get(this.apiEndPoint.TODO.FETCH_ITEM_DETAILS(Number(id)));\n  }\n  populateForm(item) {\n    return this.fb.group({\n      id: new FormControl(item.id),\n      name: new FormControl(item.name, [Validators.required, Validators.min(3), Validators.max(255)]),\n      description: new FormControl(item.description),\n      priority: new FormControl(item.priority),\n      status: new FormControl(item.status, [Validators.required]),\n      tags: new FormControl(item.tags),\n      date: new FormControl(new Date(item.date))\n    });\n  }\n  getTodoForm() {\n    return this.fb.group({\n      id: new FormControl(null),\n      name: new FormControl(null, [Validators.required, Validators.min(3), Validators.max(255)]),\n      description: new FormControl(null),\n      priority: new FormControl(null),\n      status: new FormControl(null, [Validators.required]),\n      tags: new FormControl(null),\n      date: new FormControl(null)\n    });\n  }\n}\nTodoServiceService.ɵfac = function TodoServiceService_Factory(t) {\n  return new (t || TodoServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApiEndpoints), i0.ɵɵinject(i3.FormBuilder));\n};\nTodoServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TodoServiceService,\n  factory: TodoServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAOA,SAAqBA,WAAW,EAAaC,UAAU,QAAO,gBAAgB;;;;;AAM9E,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,UAAsB,EAAUC,WAAyB,EAAUC,EAAe;IAAlF,eAAU,GAAVF,UAAU;IAAsB,gBAAW,GAAXC,WAAW;IAAwB,OAAE,GAAFC,EAAE;EACzF;EAEAC,WAAW,CAACC,IAAY,EAAEC,IAAY,EAAEC,KAAa;IACnD,OAAO,IAAI,CAACN,UAAU,CAACO,GAAG,CAAY,IAAI,CAACN,WAAW,CAACO,IAAI,CAACC,eAAe,GAAG,SAASL,IAAI,SAASC,IAAI,UAAUC,KAAK,EAAE,CAAC;EAC5H;EAEAI,UAAU,CAACC,EAAU;IACnB,OAAO,IAAI,CAACX,UAAU,CAACY,MAAM,CAAS,IAAI,CAACX,WAAW,CAACO,IAAI,CAACK,gBAAgB,CAACF,EAAE,CAAC,CAAC;EACnF;EAEAG,UAAU,CAACH,EAAU;IACnB,OAAO,IAAI,CAACX,UAAU,CAACO,GAAG,CAAY,IAAI,CAACN,WAAW,CAACO,IAAI,CAACO,kBAAkB,CAACC,MAAM,CAACL,EAAE,CAAC,CAAC,CAAC;EAC7F;EAGAM,YAAY,CAACC,IAAe;IAC1B,OAAO,IAAI,CAAChB,EAAE,CAACiB,KAAK,CAAC;MACnBR,EAAE,EAAE,IAAIf,WAAW,CAACsB,IAAI,CAACP,EAAE,CAAC;MAC5BS,IAAI,EAAE,IAAIxB,WAAW,CAACsB,IAAI,CAACE,IAAI,EAAE,CAACvB,UAAU,CAACwB,QAAQ,EAAExB,UAAU,CAACyB,GAAG,CAAC,CAAC,CAAC,EAAEzB,UAAU,CAAC0B,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAC/FC,WAAW,EAAE,IAAI5B,WAAW,CAACsB,IAAI,CAACM,WAAW,CAAC;MAC9CC,QAAQ,EAAE,IAAI7B,WAAW,CAACsB,IAAI,CAACO,QAAQ,CAAC;MACxCC,MAAM,EAAE,IAAI9B,WAAW,CAACsB,IAAI,CAACQ,MAAM,EAAC,CAAC7B,UAAU,CAACwB,QAAQ,CAAC,CAAC;MAC1DM,IAAI,EAAE,IAAI/B,WAAW,CAACsB,IAAI,CAACS,IAAI,CAAC;MAChCC,IAAI,EAAE,IAAIhC,WAAW,CAAC,IAAIiC,IAAI,CAACX,IAAI,CAACU,IAAI,CAAC;KAE1C,CAAC;EACJ;EAEAE,WAAW;IACT,OAAO,IAAI,CAAC5B,EAAE,CAACiB,KAAK,CAAC;MACnBR,EAAE,EAAE,IAAIf,WAAW,CAAC,IAAI,CAAC;MACzBwB,IAAI,EAAE,IAAIxB,WAAW,CAAC,IAAI,EAAE,CAACC,UAAU,CAACwB,QAAQ,EAAExB,UAAU,CAACyB,GAAG,CAAC,CAAC,CAAC,EAAEzB,UAAU,CAAC0B,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAC1FC,WAAW,EAAE,IAAI5B,WAAW,CAAC,IAAI,CAAC;MAClC6B,QAAQ,EAAE,IAAI7B,WAAW,CAAC,IAAI,CAAC;MAC/B8B,MAAM,EAAE,IAAI9B,WAAW,CAAC,IAAI,EAAC,CAACC,UAAU,CAACwB,QAAQ,CAAC,CAAC;MACnDM,IAAI,EAAE,IAAI/B,WAAW,CAAC,IAAI,CAAC;MAC3BgC,IAAI,EAAE,IAAIhC,WAAW,CAAC,IAAI;KAE3B,CAAC;EACJ;;AA1CWE,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAiC,SAAlBjC,kBAAkB;EAAAkC,YAFjB;AAAM","names":["FormControl","Validators","TodoServiceService","constructor","httpClient","apiEndPoint","fb","getToDoList","page","size","query","get","TODO","FETCH_TODO_LIST","deleteItem","id","delete","DELETE_TODO_ITEM","getDetails","FETCH_ITEM_DETAILS","Number","populateForm","item","group","name","required","min","max","description","priority","status","tags","date","Date","getTodoForm","factory","providedIn"],"sourceRoot":"","sources":["/Users/anjarul/Desktop/anjarul/proIT/todoAngular/src/app/todo/services/todo-service.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {NgxUiLoaderService} from \"ngx-ui-loader\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {ApiEndpoints} from \"../../shared/commons/ApiEndPoint\";\nimport {Observable} from \"rxjs\";\nimport {ITodoList} from \"../models/itodo-list\";\nimport {ItodoItem} from \"../models/itodo-item\";\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {DatePipe} from \"@angular/common\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoServiceService {\n\n  constructor(private httpClient: HttpClient, private apiEndPoint: ApiEndpoints, private fb: FormBuilder) {\n  }\n\n  getToDoList(page: number, size: number, query: string): Observable<ITodoList> {\n    return this.httpClient.get<ITodoList>(this.apiEndPoint.TODO.FETCH_TODO_LIST + `?page=${page}&size=${size}&query=${query}`);\n  }\n\n  deleteItem(id: number): Observable<String> {\n    return this.httpClient.delete<String>(this.apiEndPoint.TODO.DELETE_TODO_ITEM(id));\n  }\n\n  getDetails(id: string): Observable<ItodoItem> {\n    return this.httpClient.get<ItodoItem>(this.apiEndPoint.TODO.FETCH_ITEM_DETAILS(Number(id)))\n  }\n\n\n  populateForm(item: ItodoItem) {\n    return this.fb.group({\n      id: new FormControl(item.id),\n      name: new FormControl(item.name, [Validators.required, Validators.min(3), Validators.max(255)]),\n      description: new FormControl(item.description),\n      priority: new FormControl(item.priority),\n      status: new FormControl(item.status,[Validators.required]),\n      tags: new FormControl(item.tags),\n      date: new FormControl(new Date(item.date)),\n\n    });\n  }\n\n  getTodoForm() {\n    return this.fb.group({\n      id: new FormControl(null),\n      name: new FormControl(null, [Validators.required, Validators.min(3), Validators.max(255)]),\n      description: new FormControl(null),\n      priority: new FormControl(null),\n      status: new FormControl(null,[Validators.required]),\n      tags: new FormControl(null),\n      date: new FormControl(null),\n\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}