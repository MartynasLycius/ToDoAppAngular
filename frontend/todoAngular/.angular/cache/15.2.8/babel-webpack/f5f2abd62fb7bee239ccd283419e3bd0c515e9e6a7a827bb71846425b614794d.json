{"ast":null,"code":"import { HttpResponse } from \"@angular/common/http\";\nimport { tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nexport class ErrorInterceptorService {\n  constructor(toast) {\n    this.toast = toast;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(tap(event => {\n      if (event instanceof HttpResponse && event.status === 200) {\n        const successResponse = new HttpResponse({\n          body: {\n            success: true\n          },\n          headers: event.headers,\n          status: event.status,\n          statusText: event.statusText\n        });\n        // Emit the success response instead of the original event\n        return event = successResponse;\n      }\n    }));\n  }\n  handleError(error) {\n    if (error.status === 400) {\n      this.toast.error(error.message, 'Bad Request');\n    } else if (error.status === 401) {\n      this.toast.error('', 'Token Expired');\n    } else if (error.status === 417) {\n      this.toast.error(error.message, 'Request error');\n    } else if (error.status >= 500) {\n      this.toast.error('Please contact with support team', 'Data fetching error');\n    } else if (error.status >= 412) {\n      this.toast.error(error?.message);\n    }\n  }\n}\nErrorInterceptorService.ɵfac = function ErrorInterceptorService_Factory(t) {\n  return new (t || ErrorInterceptorService)(i0.ɵɵinject(i1.ToastrService));\n};\nErrorInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorInterceptorService,\n  factory: ErrorInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAMEA,YAAY,QACP,sBAAsB;AAC7B,SAAgCC,GAAG,QAAmB,MAAM;;;AAM5D,OAAM,MAAOC,uBAAuB;EAElCC,YAAoBC,KAAoB;IAApB,UAAK,GAALA,KAAK;EACzB;EAEAC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BR,GAAG,CAAES,KAAqB,IAAI;MAC5B,IAAIA,KAAK,YAAYV,YAAY,IAAIU,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACzD,MAAMC,eAAe,GAAG,IAAIZ,YAAY,CAAC;UACvCa,IAAI,EAAE;YAAEC,OAAO,EAAE;UAAI,CAAE;UACvBC,OAAO,EAAEL,KAAK,CAACK,OAAO;UACtBJ,MAAM,EAAED,KAAK,CAACC,MAAM;UACpBK,UAAU,EAAEN,KAAK,CAACM;SACnB,CAAC;QAEF;QACA,OAAON,KAAK,GAAGE,eAAe;;IAElC,CAAC,CAAC,CACH;EACH;EAEQK,WAAW,CAACC,KAAwB;IAC1C,IAAIA,KAAK,CAACP,MAAM,KAAK,GAAG,EAAE;MAExB,IAAI,CAACP,KAAK,CAACc,KAAK,CAACA,KAAK,CAACC,OAAO,EAAE,aAAa,CAAC;KAC/C,MAAM,IAAID,KAAK,CAACP,MAAM,KAAK,GAAG,EAAE;MAC/B,IAAI,CAACP,KAAK,CAACc,KAAK,CAAC,EAAE,EAAE,eAAe,CAAC;KACtC,MAAM,IAAIA,KAAK,CAACP,MAAM,KAAK,GAAG,EAAE;MAC/B,IAAI,CAACP,KAAK,CAACc,KAAK,CAACA,KAAK,CAACC,OAAO,EAAE,eAAe,CAAC;KACjD,MAAM,IAAID,KAAK,CAACP,MAAM,IAAI,GAAG,EAAE;MAC9B,IAAI,CAACP,KAAK,CAACc,KAAK,CAAC,kCAAkC,EAAE,qBAAqB,CAAC;KAC5E,MAAM,IAAIA,KAAK,CAACP,MAAM,IAAI,GAAG,EAAE;MAC9B,IAAI,CAACP,KAAK,CAACc,KAAK,CAACA,KAAK,EAAEC,OAAO,CAAC;;EAEpC;;AApCWjB,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;SAAvBA,uBAAuB;EAAAkB,SAAvBlB,uBAAuB;EAAAmB,YAFtB;AAAM","names":["HttpResponse","tap","ErrorInterceptorService","constructor","toast","intercept","request","next","handle","pipe","event","status","successResponse","body","success","headers","statusText","handleError","error","message","factory","providedIn"],"sourceRoot":"","sources":["/Users/anjarul/Desktop/anjarul/proIT/todoAngular/src/app/shared/services/error-interceptor.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse\n} from \"@angular/common/http\";\nimport {catchError, Observable, tap, throwError} from \"rxjs\";\nimport {ToastrService} from \"ngx-toastr\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorInterceptorService implements HttpInterceptor {\n\n  constructor(private toast: ToastrService) {\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      tap((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse && event.status === 200) {\n          const successResponse = new HttpResponse({\n            body: { success: true }, // Modify the body as needed\n            headers: event.headers,\n            status: event.status,\n            statusText: event.statusText,\n          });\n\n          // Emit the success response instead of the original event\n          return event = successResponse;\n        }\n      })\n    );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 400) {\n\n      this.toast.error(error.message, 'Bad Request');\n    } else if (error.status === 401) {\n      this.toast.error('', 'Token Expired');\n    } else if (error.status === 417) {\n      this.toast.error(error.message, 'Request error');\n    } else if (error.status >= 500) {\n      this.toast.error('Please contact with support team', 'Data fetching error');\n    } else if (error.status >= 412) {\n      this.toast.error(error?.message);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}