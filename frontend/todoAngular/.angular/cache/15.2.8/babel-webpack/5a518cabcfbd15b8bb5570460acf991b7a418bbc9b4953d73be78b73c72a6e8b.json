{"ast":null,"code":"import { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"ngx-ui-loader\";\nexport class ErrorInterceptorService {\n  constructor(toast, ngxService) {\n    this.toast = toast;\n    this.ngxService = ngxService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      this.handleError(error);\n      return throwError(error);\n    }));\n  }\n  handleError(error) {\n    this.ngxService.stopAllLoader(\"\");\n    if (error.status === 400) {\n      this.toast.error(error.message, 'Bad Request');\n    } else if (error.status === 401) {\n      this.toast.error('', 'Token Expired');\n    } else if (error.status === 417) {\n      this.toast.error(error.message, 'Request error');\n    } else if (error.status >= 500) {\n      this.toast.error('Please contact with support team', 'Data fetching error');\n    } else if (error.status >= 412) {\n      this.toast.error(error?.message);\n    }\n  }\n}\nErrorInterceptorService.ɵfac = function ErrorInterceptorService_Factory(t) {\n  return new (t || ErrorInterceptorService)(i0.ɵɵinject(i1.ToastrService), i0.ɵɵinject(i2.NgxUiLoaderService));\n};\nErrorInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorInterceptorService,\n  factory: ErrorInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAQA,UAAU,EAAcC,UAAU,QAAO,MAAM;;;;AAOvD,OAAM,MAAOC,uBAAuB;EAElCC,YAAoBC,KAAoB,EAAUC,UAA8B;IAA5D,UAAK,GAALD,KAAK;IAAyB,eAAU,GAAVC,UAAU;EAC5D;EAEAC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CACxBG,IAAI,CACHV,UAAU,CAAEW,KAAwB,IAAI;MACtC,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;MACvB,OAAOV,UAAU,CAACU,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACL;EAEQC,WAAW,CAACD,KAAwB;IAC1C,IAAI,CAACN,UAAU,CAACQ,aAAa,CAAC,EAAE,CAAC;IAEjC,IAAIF,KAAK,CAACG,MAAM,KAAK,GAAG,EAAE;MACxB,IAAI,CAACV,KAAK,CAACO,KAAK,CAACA,KAAK,CAACI,OAAO,EAAE,aAAa,CAAC;KAC/C,MAAM,IAAIJ,KAAK,CAACG,MAAM,KAAK,GAAG,EAAE;MAC/B,IAAI,CAACV,KAAK,CAACO,KAAK,CAAC,EAAE,EAAE,eAAe,CAAC;KACtC,MAAM,IAAIA,KAAK,CAACG,MAAM,KAAK,GAAG,EAAE;MAC/B,IAAI,CAACV,KAAK,CAACO,KAAK,CAACA,KAAK,CAACI,OAAO,EAAE,eAAe,CAAC;KACjD,MAAM,IAAIJ,KAAK,CAACG,MAAM,IAAI,GAAG,EAAE;MAC9B,IAAI,CAACV,KAAK,CAACO,KAAK,CAAC,kCAAkC,EAAE,qBAAqB,CAAC;KAC5E,MAAM,IAAIA,KAAK,CAACG,MAAM,IAAI,GAAG,EAAE;MAC9B,IAAI,CAACV,KAAK,CAACO,KAAK,CAACA,KAAK,EAAEI,OAAO,CAAC;;EAEpC;;AA7BWb,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;SAAvBA,uBAAuB;EAAAc,SAAvBd,uBAAuB;EAAAe,YAFtB;AAAM","names":["catchError","throwError","ErrorInterceptorService","constructor","toast","ngxService","intercept","request","next","handle","pipe","error","handleError","stopAllLoader","status","message","factory","providedIn"],"sourceRoot":"","sources":["/Users/anjarul/Desktop/anjarul/proIT/todoAngular/src/app/shared/services/error-interceptor.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from \"@angular/common/http\";\nimport {catchError, Observable, throwError} from \"rxjs\";\nimport {ToastrService} from \"ngx-toastr\";\nimport {NgxUiLoaderService} from \"ngx-ui-loader\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorInterceptorService implements HttpInterceptor {\n\n  constructor(private toast: ToastrService, private ngxService: NgxUiLoaderService) {\n  }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request)\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          this.handleError(error);\n          return throwError(error);\n        })\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    this.ngxService.stopAllLoader(\"\");\n\n    if (error.status === 400) {\n      this.toast.error(error.message, 'Bad Request');\n    } else if (error.status === 401) {\n      this.toast.error('', 'Token Expired');\n    } else if (error.status === 417) {\n      this.toast.error(error.message, 'Request error');\n    } else if (error.status >= 500) {\n      this.toast.error('Please contact with support team', 'Data fetching error');\n    } else if (error.status >= 412) {\n      this.toast.error(error?.message);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}